# -*- coding: utf-8 -*-
"""Zamiana_kolorHTML_na_kolorRGB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15TNJuV2eXpJl-1f2M92OZTU30fFKGB8Z

W języku HTML oraz kaskadowych arkuszach stylów (CSS) powszechne jest ustalanie kolorów elementów w postaci łańcucha #RRGGBB, gdzie RR jest dwucyfrową liczbą (od 0x0 do 0xFF) w kodzie szesnastkowym oznaczającą ile czerwieni jest w wynikowym kolorze. Analogicznie GG oznacza nasycenie zieleni, a BB niebieskiego.

Napisać funkcję HTMLColor2RGB(color) , która jako parametr przyjmuje łańcuch postaci ”#RRGGBB” i zwraca tablicę 3 liczb całkowitych w systemie 10 oznaczających nasycenie poszczególnych składowych. Przykład

Wynikiem HTMLColor2RGB("#FF0050") powinna być tablica { 255, 0, 80 }.

Wynikiem HTMLColor2RGB("#001020") powinna być tablica { 0, 16, 32 }.
"""

def HTMLColor2RGB(color):

    color = color.lstrip("#")   

    liczby_szesnastk = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]
    odpowiedniki_dzies = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    slownik = {}
    for el1, el2 in zip(liczby_szesnastk, odpowiedniki_dzies):
        slownik[el1] = el2                                                

    lista = []
    for i in range(0,len(color) - 1, 2):                
        krotka_z_kolorem_hex = (color[i+1], color[i])           
        lista.append(krotka_z_kolorem_hex)              

    listaRGB = []
    for wiersz in range(len(lista)):
        for kolumna in range(len(lista[wiersz])):
            znak = lista[wiersz][kolumna]                   
            wartosc = slownik[znak]*16**kolumna            
            listaRGB.append(wartosc)

    lista_kolor_RGB = []
    for i in range(0,len(listaRGB)-1,2):
        krotka_z_kolorem_rgb = (listaRGB[i] + listaRGB[i+1])            
        lista_kolor_RGB.append(krotka_z_kolorem_rgb)
    print(lista_kolor_RGB)

    return color

lancuch = "#001020"
s = HTMLColor2RGB(lancuch)