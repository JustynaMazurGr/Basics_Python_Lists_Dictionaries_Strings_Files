# -*- coding: utf-8 -*-
"""pliki_tekstowe_program_do_różnych_operacji_na_plikach.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/160WE3uql38Tgq0vAts_abO5mPb-rJ2RN

Napisać program, który po uruchomieniu (przepraszam za uosobienie) wykonuje
(według wyboru – może być poprzez parametr):

 wyświetlenie sumy wszystkich liczb zapisanych we wszystkich plikach z katalogu, w którym się znajduje,

 wyświetlenie nazw plików, w których znajduje się podana (jako parametr)
fraza, wraz z liczbą wystąpień tej frazy,

 zamianę podanego znaku lub ciągu znaków na inny we wszystkich plikach z
katalogu,

 wyświetlenie stosunku sumy liczb całkowitych do rzeczywistych (z wszystkich
plików w katalogu),

 wyświetlenie plików ze względu na liczbę znaków (w kolejności rosnącej pod
względem liczby znaków),

 połączenie wszystkich plików w jeden z pominięciem powtarzających się linii,
"""

import os


#wyświetlić pliki z wybranego katalogu

catalog_name = "/content/drive/MyDrive/Do ćwiczeń"
all_from_catalog = os.listdir(catalog_name)
print("wszystko z katalogu: ",all_from_catalog)      

files_names = [name for name in all_from_catalog
                        if os.path.isfile(os.path.join(catalog_name,name))]      
print("nazwy plików: ",files_names)

full_text = ""

for name in files_names:
    content = open(os.path.join(catalog_name,name)).read()     


#wyświetlenie sumy wszystkich liczb zapisanych w poszczególnych plikach z katalogu, w którym się znajduje    
    content_zm = content.replace(",",".")
    words_list = content_zm.split()
    numbers_list = []
    for el in words_list:
        try:
            numbers_list.append(float(el))
        except ValueError:
            pass
    print(f"suma wszystkich liczb z pliku: {name} wynosi: {sum(numbers_list):.2f}")
    
    full_text += content_zm + "\n"                 


#wyświetlenie sumy wszystkich liczb zapisanych we wszystkich plikach z katalogu, w którym się znajduje

words_list_all_files = full_text.split()    
list_all_numbers = []
for el in words_list_all_files:
    try:
        list_all_numbers.append(float(el))
    except ValueError:
        pass

print(f"suma wszystkich liczb ze wszystkich plików wynosi: {sum(list_all_numbers):.2f}")


#wyświetlenie nazw plików, w których znajduje się podana (jako parametr) fraza, wraz z liczbą wystąpień tej frazy
def files_names_dla_frazy(phrase):

    for name in files_names:
        content = open(os.path.join(catalog_name,name)).read()
        counter = 0
        if phrase in content:
            counter = content.count(phrase)
        print("nazwa pliku: ",name,"liczba wystąpień podanej frazy: ",counter)

phrase = "zupy."
search_phrase = files_names_dla_frazy(phrase)

#zamiana podanego znaku lub ciągu znaków na inny we wszystkich plikach z katalogu

def change_signs(par1, par2):

    for name in files_names:
        file = open(os.path.join(catalog_name,name)).read()     
        content2 = file.replace(par1,par2)
        file_change_content = open(os.path.join(catalog_name,name),"w")
        file_change_content.write(content2)


phrase_to_change = "Zosia"
new_phrase = "Kasia"
strings_to_convert = change_signs(phrase_to_change,new_phrase)

#wyświetlenie stosunku sumy liczb całkowitych do rzeczywistych (z wszystkich plików w katalogu)

words_list_all_files = full_text.split()    

list_integers = []
for el in words_list_all_files:
    if el.isdigit():
        list_integers.append(int(el))

list_floats = []
for el in words_list_all_files:
    if not el.isdigit():
        try:
            list_floats.append(float(el))
        except ValueError:
            pass

if list_floats != []:
    print(f"stosunek sumy liczb całkowitych do rzeczywistych (z wszystkich plików w katalogu): {sum(list_integers)/sum(list_floats):.2f}")
else:
    print("W plikach są tylko liczby całkowite")

#wyświetlenie plików ze względu na liczbę znaków (w kolejności rosnącej pod względem liczby znaków)
dictionary_files = {}
for name in files_names:
    content = open(os.path.join(catalog_name,name)).read()
    dl_content = len(content)
    dictionary_files[dl_content] = name
keys = list(dictionary_files.keys())
values = list(dictionary_files.values())
keys.sort() 
sort_keys = keys 
files_sort_length = {}
for element in sort_keys:               
    files_sort_length[element] = dictionary_files[element]        
print("pliki posortowane wg ilosci znaków: ",list(files_sort_length.values()))

#połączenie wszystkich plików w jeden z pominięciem powtarzających się linii
lines = full_text.split('\n')

list_without_repeat_lines = []
for el in lines:
    if el not in list_without_repeat_lines:
        list_without_repeat_lines.append(el)

joined_content_without_repeats = '\n'.join(list_without_repeat_lines)

new_file_full = open(os.path.join(catalog_name,"nowy_plik_z_zawartością_ze_wszystkich.txt"),"w")
new_file_full.write(joined_content_without_repeats)
new_file_full.close()